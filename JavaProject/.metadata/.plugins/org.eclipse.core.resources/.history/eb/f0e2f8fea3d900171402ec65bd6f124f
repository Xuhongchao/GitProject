package com.pxene.core;

import java.io.IOException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 * Created by @author xuhongchao on @date 2017年 12月 05日 下午5:35:17
 */

public class ProcessResult {
	private final static String READ_PATH = "C:\\Users\\xu\\Desktop\\test.xlsx";
	static Map<String, Integer> map;

	public void result() throws IOException {
		// 工作簿
		XSSFWorkbook wb = new XSSFWorkbook(READ_PATH);
		// 工作表
		XSSFSheet sheet = wb.getSheetAt(0);
		// 得到工作表的第一行和最后一行
		int end = sheet.getLastRowNum();
		int count = 0;
		String result1 = null;
		String key = null;
		// 读取数据
		for (int i = 1; i <= end; i++) {
			// 得到每一行
			Row row = sheet.getRow(i);
			if (row == null) {
				if (count != 0) {
					map.put(key, count);
					System.out.println(map);
				}
				count = 0;
				continue;
			}
			// 得到每行的第一个单元格和最后一个单元格
			// int firstCell = row.getFirstCellNum();
			// int endCell = row.getLastCellNum();

			// 读取每个单元格的内容
			Cell cell = row.getCell(0, Row.CREATE_NULL_AS_BLANK);
			result1 = turn(cell);
			if (!"".equals(result1.trim())) {
				key = result1;
				map = new HashMap<String, Integer>();
			}

			Cell cell2 = row.getCell(5, Row.CREATE_NULL_AS_BLANK);
			String result2 = turn(cell2);
			if (result2 != null || !" ".equals(result2)) {
				count++;
			}

			if (i == end) {
				map.put(key, count);
				System.out.println(map);
			}

			/*
			 * for (int j = firstCell; j < endCell; j++) { // 判断单元格内容 }
			 */
		}
	}

	private String turn(Cell cell) {
		String value;
		switch (cell.getCellType()) {
		case HSSFCell.CELL_TYPE_NUMERIC: // 数字
			value = cell.getNumericCellValue() + "";
			if (HSSFDateUtil.isCellDateFormatted(cell)) {
				Date date = cell.getDateCellValue();
				if (date != null) {
					value = new SimpleDateFormat("yyyy-MM-dd").format(date);
				} else {
					value = "";
				}
			} else {
				value = new DecimalFormat("0").format(cell
						.getNumericCellValue());
			}
			break;
		case HSSFCell.CELL_TYPE_STRING: // 字符串
			value = cell.getStringCellValue();
			break;
		case HSSFCell.CELL_TYPE_BOOLEAN: // Boolean
			value = cell.getBooleanCellValue() + "";
			break;
		case HSSFCell.CELL_TYPE_FORMULA: // 公式
			value = cell.getCellFormula() + "";
			break;
		case HSSFCell.CELL_TYPE_BLANK: // 空值
			value = "";
			break;
		case HSSFCell.CELL_TYPE_ERROR: // 故障
			value = "非法字符";
			break;
		default:
			value = "未知类型";
			break;
		}
		return value;
	}
}
