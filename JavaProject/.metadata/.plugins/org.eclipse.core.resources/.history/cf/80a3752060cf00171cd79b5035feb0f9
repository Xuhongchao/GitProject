package com.pxene.odata;

import static org.junit.Assert.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.junit.Test;

import com.pxene.entity.Data;
import com.pxene.service.LoadLine;
import com.pxene.service.LoadUrlExam;

/**
 * Created by @author xuhongchao on @date 2017年 月 日 下午2:00:53
 */

public class CoreTest {
	@Test
	public void testName() throws Exception {
		String[] strs = { "auto.com?s", "auto.com?s", "auto.com?s" };

		String compile = ".*auto.com.*";
		Pattern p = Pattern.compile(compile);
		for (String str : strs) {
			Matcher m = p.matcher(str);
			boolean b = m.matches();
			System.out.println(b);
		}
	}

	@Test
	public void test() throws Exception {
		String paramReg = "NULL";
		String[] params = paramReg.split("\t");
		if (params.length == 1 && "NULL".equals(params[0])) {
			System.out.println("1");
		}
	}

	@Test
	public void test2() throws Exception {
		HashMap<String, String> container = new HashMap<String, String>();
		container.put("1", "1");
		container.put("2", "2");
		container.put("3", "3");
		System.out.println(container.size());
		container.clear();
		System.out.println(container.size());
	}

	@Test
	public void test3() throws Exception {
		String string = "http://btrace.qq.com/kvcollect?BossI";
		System.out.println(string.startsWith("https"));
		System.out.println(killBeginOfUrl(string));

	}

	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	public static void main(String[] args) {
		List<Data> list = new LoadLine().readFromExcelToData(); // 拿正则
		Map<String, String> map = new LoadUrlExam().getAllUrl(); // 拿url

		new CoreTest().filter(list, map);
	}

	public void filter(List<Data> list, Map<String, String> map) {
		HashMap<String, String> container = new HashMap<String, String>();
		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		for (Data data : list) {
			String num = data.getNum();
			String domain = data.getDomain();
			String paramReg = data.getParam();
			String urlReg = data.getUrlReg();
			String urlExam = data.getUrlExam();
			urlExam = killBeginOfUrl(urlExam);
			System.out.println(urlExam);

			// 进行匹配
			String compile = domain + urlReg;
			Pattern p = Pattern.compile(compile);
			// 指标（>1说明有多个匹配）
			int index = 0;
			for (Map.Entry<String, String> entry : map.entrySet()) {
				/*
				 * 分两步走： 首先让每一个url过（domain + urlReg） ； 然后再一个一个的过参数正则（参数正则可能有多个）；
				 * 全过之后就+1；
				 */
				Matcher m = p.matcher(entry.getKey());
				boolean b = m.matches();
				if (b) {
					String[] params = paramReg.split("\t");
					if (params.length == 1 && "NULL".equals(params[0])) {
						// 如果参数只为NULL，该情况是主域名的情况，直接跳出输出b
						break;
					}
					for (int i = 0; i < params.length; i++) {
						if ("NULL".equals(params[i])) {
							continue;
						}
						p = Pattern.compile(params[i]);
						m = p.matcher(urlExam);
						b = m.find();
						if (!b) { // 有一个不同即为不同
							break;
						}
					}
					// 将指标+1
					index++;
					// 并记录一下通过的url和num
					container.put(entry.getKey(), entry.getValue());
				}
			}
			if (map.size() == 1 && index == 1) {
				map.clear();
			} else if (index > 1) {
				map.put(UUID.randomUUID().toString(), "到这里分组");
			}
			// 重置条件
			index = 0;
		}
		System.out.println(map.size());
	}

	/**
	 * 将url开头的http或者https去掉
	 * 
	 * @param url
	 * @return 返回截取后的字符串
	 */
	private String killBeginOfUrl(String url) {
		if (url.startsWith("http")) {
			url = url.split("http://")[1];
		} else if (url.startsWith("https://")) {
			url = url.split("https://")[1];
		} else {
			return url;
		}

	}
}
